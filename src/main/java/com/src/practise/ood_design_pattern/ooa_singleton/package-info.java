package com.src.practise.ood_design_pattern.ooa_singleton;
/*
*
*  什么是单例设计模式？
*         保证在一个jvm中，只能存在一个实例，保证对象的唯一性
*
*  应用场景
*
*         任务管理器只能打开一次
*         servlet
*         struts2
*         springMVC
*         连接池
*         线程池，重复进行利用
*         spring默认单例
*         枚举
*         1. Windows的Task Manager（任务管理器）就是很典型的单例模式（这个很熟悉吧），想想看，是不是呢，你能打开两个windows task manager吗？ 不信你自己试试看哦~
*         2. windows的Recycle Bin（回收站）也是典型的单例应用。在整个系统运行过程中，回收站一直维护着仅有的一个实例。
*         3. 网站的计数器，一般也是采用单例模式实现，否则难以同步。
*         4. 应用程序的日志应用，一般都何用单例模式实现，这一般是由于共享的日志文件一直处于打开状态，因为只能有一个实例去操作，否则内容不好追加。
*         5. Web应用的配置对象的读取，一般也应用单例模式，这个是由于配置文件是共享的资源。
*         6. 数据库连接池的设计一般也是采用单例模式，因为数据库连接是一种数据库资源。数据库软件系统中使用数据库连接池，主要是节省打开或者关闭数据库连接所引起的效率损耗，这种效率上的损耗还是非常昂贵的，因为何用单例模式来维护，就可以大大降低这种损耗。
*         7. 多线程的线程池的设计一般也是采用单例模式，这是由于线程池要方便对池中的线程进行控制。
*         8. 操作系统的文件系统，也是大的单例模式实现的具体例子，一个操作系统只能有一个文件系统。
*         9. HttpApplication 也是单位例的典型应用。熟悉ASP.Net(IIS)的整个请求生命周期的人应该知道HttpApplication也是单例模式，所有的HttpModule都共享一个HttpApplication实例.

*
*  为什么要设计成单例？单例好处？优缺点
*
*         节省内存
*         重复利用
*         方便管理
*
*
*         缺点：线程安全(servlet)
单例优缺点

优点：
    1.在单例模式中，活动的单例只有一个实例，对单例类的所有实例化得到的都是相同的一个实例。这样就 防止其它对象对自己的实例化，确保所有的对象都访问一个实例
    2.单例模式具有一定的伸缩性，类自己来控制实例化进程，类就在改变实例化进程上有相应的伸缩性。
    3.提供了对唯一实例的受控访问。
    4.由于在系统内存中只存在一个对象，因此可以 节约系统资源，当 需要频繁创建和销毁的对象时单例模式无疑可以提高系统的性能。
    5.允许可变数目的实例。
    6.避免对共享资源的多重占用。
缺点：
    1.不适用于变化的对象，如果同一类型的对象总是要在不同的用例场景发生变化，单例就会引起数据的错误，不能保存彼此的状态。
    2.由于单利模式中没有抽象层，因此单例类的扩展有很大的困难。
    3.单例类的职责过重，在一定程度上违背了“单一职责原则”。
    4.滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为的单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失。


  创建方式：7种
  	饿汉式:类初始化时,会立即加载该对象，线程天生安全,调用效率高。
	懒汉式: 类初始化时,不会初始化该对象,真正需要使用的时候才会创建该对象,具备懒加载功能。线程不安全
	静态内部方式:结合了懒汉式和饿汉式各自的优点，真正需要对象的时候才会加载，加载类是线程安全的。
	枚举单例: 使用枚举实现单例模式 优点:实现简单、调用效率高，枚举本身就是单例，由jvm从根本上提供保障!避免通过反射和反序列化的漏洞， 缺点没有延迟加载。
	双重检测锁方式 (因为JVM本质重排序的原因，可能会初始化多次，不推荐使用)可以通过关键字禁止重排序

*最常用：
*    懒汉式
*    饿汉式
*    静态内部类
*    枚举
*
*  如何选择单例创建方式
*
*      如果不需要延迟加载单例，可以使用枚举或者饿汉式，相对来说枚举性好于饿汉式。

       如果需要延迟加载，可以使用静态内部类或者懒汉式，相对来说静态内部类好于懒韩式。

       最好使用饿汉式，一般读配置文件，在框架启动时候就去读
       定义过多常量，会导致内存溢出

*
* */