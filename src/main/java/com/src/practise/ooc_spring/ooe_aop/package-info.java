/**
 * @author caojianbang
 * @date 2020/11/12 16:26
 */
package com.src.practise.ooc_spring.ooe_aop;

/**AOP面向切面编程
 *
 *      需要把程序逻辑分解成不同的部分，称为《关注点》
 *
 *      跨一个程序的多个点的功能称为《横切关注点》，这些横切关注点在概念上独立于程序的业务逻辑
 *
 *      它提供拦截器来拦截一个应用程序（例如当执行一个方法时，可以在方法执行之前或之后添加额外功能）
 */

/**
 * 使用场景
 *
 *      日志记录
 *
 *      审计
 *
 *      声明式事务
 *
 *      安全性
 *
 *      缓存
 */



/**
 * AOP术语
 *
 *     《通知》Advice	           这是实际行动之前或之后执行的方法。这是在程序执行期间通过 Spring AOP 框架实际被调用的代码。
 *
 *     《连接点》Join point	    在你的应用程序中它代表一个点，你可以在插件 AOP 方面。你也能说，它是在实际的应用程序中，其中一个操作将使用 Spring AOP 框架。
 *
 *     《切入点》Pointcut	       这是一组一个或多个连接点，通知应该被执行。你可以使用表达式或模式指定切入点正如我们将在 AOP 的例子中看到的。
 *
 *     《切面》Aspect	           一个模块具有一组提供横切需求的 APIs。例如，一个日志模块为了记录日志将被 AOP 方面调用。应用程序可以拥有任意数量的方面，这取决于需求。
 *
 *     《引入》Introduction	   引用允许你添加新方法或属性到现有的类中。
 *
 *     《目标》Target object	   被一个或者多个方面所通知的对象，这个对象永远是一个被代理对象。也称为被通知对象。
 *
 *     《代理》proxy            应用通知的对象，详细内容参见设计模式里面的代理模式
 *
 *     	《织入》Weaving          把方面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时，类加载时和运行时完成。
 *
 *
 *
 */

/**
 * 通知类型
 *
 *    前置通知      	 在一个方法执行之前，执行通知。
 *    后置通知	        在一个方法执行之后，不考虑其结果，执行通知。
 *    返回后通知	    在一个方法执行之后，只有在方法成功完成时，才能执行通知。
 *    抛出异常后通知	 在一个方法执行之后，只有在方法退出抛出异常时，才能执行通知。
 *    环绕通知	        在建议方法调用之前和之后，执行通知。
 *
 */