package com.src.practise.oob_javaSE.e_object_oriented;

//类，学得累
/*对象在内存中的存在图
 * */
public class ClassAndObject {
    public static void main(String[] args) {
        //第一猫
        int catAge = 22;
        String Name = "小白";

        //第二毛
        int cat2Age = 22;
        String Name2 = "小花";
        /*
         * 猫的属性是分散的，
         *
         * */
        //java 百分之九十五 面向对象
        /*汇编 面向机器  汇编不会编
          c    面向过程
          Java 面向对象

          计算机语言的发展向接近人的思维方式演变

          面向切面


          对象==实例 同一个含义
          下面表达的都是同一个含义，不要迷糊


          1.创建一个对象
          2.实例化一个对象
          3.把类实例化


          Java中怎样做一个猫
          我认为,取决于自己和实际情况
          类首字母要大写
        * */

        class Cat {
            //类的成员变量、成员属性
            int age;
            String name;
            String color;
        }

        Cat cat = new Cat();
        //访问属性 类.属性
        cat.age = 2;
        cat.name = "xiaoxiao";

        /*类与对象的区别于联系，（牢记）

        1.类是抽象的，概念的，代表一类事物，比如人类，猫类
        2.对象是具体的，实际的，代表一个具体事物
        3.类是对象的模板，对象是类的一个个体，实例
        * */
        /*
        * 如何定义一个类
        *
        * 一个全面的类的定义比较复杂
        *
        * package 包名；
        * class 类名 extends 父类 implements 接口名{
        *
        * 成员变量；
        * 构造方法；
        * 成员方法；

        * }
        *
        * 2000年是互联网的一个寒冬
        *
        *
        *
        * 成员变量
        *
        *   成员变量是类的一个组成部分，一般是基本数据类型
        *   也可以是引用类型。
        *
        *   引用类型：类中成员变量 指向另外一个类
        *
        *   比如
        *
        *   class Master{
        *   int age;
        *   String name;
        *   }
        *     class Cat{
            //类的成员变量、成员属性
            int age;
            String name;
            String color;
            //这就是引用类型
             Master master;
        }

        * */
        /*
        *
        对象创建，创建一个对象有两种方法
        1.先声明再创建（用的比较少）
         对象声明：类名 对象名
         对象创建：对象名=new 类名（）

         2.一步到位法
         类名 对象名 = new 类名（）；


         对象如何访问（使用）对象的成员变量
         对象名.变量名（当有修饰符号，就不严谨了）

         重要
         Person p1 = new person();分配空间
         Person p2 ;未分配空间
         p1.age=15;
         p1.name="jjjj";
         p2=p1;引用，地址
         问p2.age为多少
         10
         看代码脑海中有内存图，就比较清楚了


         Person c;
         c=p2;
         c.age=9


         a.age  也等于9


         还有一种值传递就不是9了

         对象在内存中是如何存在是非常重要的

         对象没有指向的时候  a=null，就会认为是垃圾

         垃圾回收机制是Java和c++最大的区别，c++需要在代码里面进行垃圾回收


         类的成员方法，这是重点，难点

         成员方法定义

         成员方法也叫成员函数
         public 返回值类型 方法名（参数列表）{
         语句；//方法主体，函数主体
         }

         方法名首字母小写
         1.驼峰法又叫匈牙利法

         2.下滑线法  my_cry


  不同函数中  同名变量无影响
  同名函数    参数不同无影响  方法重载

  函数调用原理图  栈里面

 原理很重要，要牢牢记住
 执行方法  一遇到方法 会开辟一个独立的新栈

 执行完 会回到程序原来的地地方


 注意：返回类型要和返回结果的类型要一样

 函数重载时候  仅仅返回类型不同，是不可以的，会报错

 输出可以将  函数的调用直接输出
 int a = pppp.add(1,34);
 sout(pppp.add(1,34);)

 成员方法的声明，和方法的定义有区别

 public  void test(int a);方法声明
 访问修饰符 数据类型 函数名（参数列表）

 return 功能是将表达式的只返回个主调方法，重要

 return 表达式；


类的成员方法（函数）特别说明
p1.add(1,2.3,34,5.6);是否可以编译？无法编译，原因是小数默认是double的

注意：在在调用具体成员方法的时候，给出的具体类型和个数要都相互匹配


作业 九九乘法表
     将二维数组转置
        */

        /*类的成员变量和成员方法可以没有*/

/*
构造方法，构造函数时

创建一个对象时，就直接指定这个对象的姓名和年龄

构造方法是一种特殊的方法，主要作用是对新对象的初始化
有下面几个特点
1.方法名和类名相同
2.在创建一个类的新对象时，系统自动调用该类的构造方法完成对新对象的初始化
3.没有返回值

public Person(int age,String name){
age=age;
name=name;
 }
默认构造函数：你写构造方法，就会将它覆盖
     如果将它（默认构造方法）写出来就不会被覆盖

 一个类可以创建多个构造方法
 调用哪一个取决于后面的参数



 构造方法小结
 主要作用是初始化成员属性（变量），不要增删改查，线程，运算，那就搞笑了

 1.构造方法名与类名相同
 2.构造方法没有返回值
 3.主要作用是完成对象新对象的初始化
 4.在创建新对象时候， 系统自动调用该类的构造方法
 5.一个类可以有多个构造方法
 6.每个类都有一个默认的构造方法


重要
this
类变量、类方法
四大特征



 */
        class Person {
            int age;
            String name;

            public Person(int age, String name) {
                //可读性不好
                this.age = age;
                this.name = name;
            }

            //显示人名字
            public void showInfo() {
                System.out.println("人名" + name);
            }

        }
        Person person = new Person(23, "guodegang");
        person.showInfo();

        //不用this很容易混淆，所以产生了this
        //this是属于一个对象的，而不是类的，就像上帝造人，就自动产生我的这个代词

        class Dog{
            int age;
            String name;
            public Dog(int age, String name) {
                //可读性不好
                this.age = age;
                this.name = name;
            }

        }
        //引用类型
        //两种打出人名的方式

        //this注意事项
        //不能在类定义外部使用，只能在类定义的方法中使用
        //

        //重要：类变量 类方法 及静态变量 静态方法
        //静态变量，可以被任何一个对象访问

        //可以对象访问，也可以用类访问，但普通变量不能这么干的


    }

}
